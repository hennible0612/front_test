pipeline {
    agent any

    tools {
        nodejs "node-20"
    }

    environment {
        // 환경 변수 설정
        DOCKER_TAG = "latest"
        REPO_NAME = "sungwoo166/react-app"
        REMOTE_USER = "ubuntu"
        REMOTE_HOST = "13.125.5.85"
        CONTAINER_NAME = "react-web-app"
        IMAGE_NAME = "${REPO_NAME}:${DOCKER_TAG}"
    }

    stages {
        stage('Check Docker') {
            steps {
                script {
                    try {
                        sh 'docker --version'
                    } catch(Exception e) {
                        echo 'ERROR: Docker is not installed or not found in PATH'
                        echo "Caught: ${e}"
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/hennible0612/React_App_Repo"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Test') {
            steps {
                sh 'npm test'
            }
        }

        stage('Build React Project') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PWD', usernameVariable: 'DOCKER_USR')]) {
                    sh 'echo $DOCKER_PWD | docker login -u $DOCKER_USR --password-stdin'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${REPO_NAME}:${DOCKER_TAG} -f Dockerfile.prod ."
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${REPO_NAME}:${DOCKER_TAG}"
            }
        }

        stage('Deploy on Remote Server') {
            steps {
                echo 'Pull Docker Image & Docker Image Run on Remote Server'
                sshagent (credentials: ['ssh']) {
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker pull ${IMAGE_NAME}'"
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker run -d --name ${CONTAINER_NAME} -p 3000:3000 ${IMAGE_NAME}'"
                }
            }
        }
    }
}
